{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10591954,"sourceType":"datasetVersion","datasetId":6555535}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.299536Z","iopub.execute_input":"2025-01-27T16:19:22.299896Z","iopub.status.idle":"2025-01-27T16:19:22.702589Z","shell.execute_reply.started":"2025-01-27T16:19:22.299866Z","shell.execute_reply":"2025-01-27T16:19:22.701466Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"customer_data=pd.read_csv('/kaggle/input/zeotap-assignment/Customers.csv')\nproduct_data=pd.read_csv('/kaggle/input/zeotap-assignment/Products.csv')\ntransaction_data=pd.read_csv('/kaggle/input/zeotap-assignment/Transactions.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.704173Z","iopub.execute_input":"2025-01-27T16:19:22.704750Z","iopub.status.idle":"2025-01-27T16:19:22.746984Z","shell.execute_reply.started":"2025-01-27T16:19:22.704711Z","shell.execute_reply":"2025-01-27T16:19:22.745879Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"customer_data.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.748586Z","iopub.execute_input":"2025-01-27T16:19:22.748930Z","iopub.status.idle":"2025-01-27T16:19:22.773402Z","shell.execute_reply.started":"2025-01-27T16:19:22.748899Z","shell.execute_reply":"2025-01-27T16:19:22.772170Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"  ï»¿CustomerID        CustomerName         Region  SignupDate\n0         C0001    Lawrence Carroll  South America  2022-07-10\n1         C0002      Elizabeth Lutz           Asia  2022-02-13\n2         C0003      Michael Rivera  South America  2024-03-07\n3         C0004  Kathleen Rodriguez  South America  2022-10-09\n4         C0005         Laura Weber           Asia  2022-08-15","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ï»¿CustomerID</th>\n      <th>CustomerName</th>\n      <th>Region</th>\n      <th>SignupDate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>C0001</td>\n      <td>Lawrence Carroll</td>\n      <td>South America</td>\n      <td>2022-07-10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>C0002</td>\n      <td>Elizabeth Lutz</td>\n      <td>Asia</td>\n      <td>2022-02-13</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C0003</td>\n      <td>Michael Rivera</td>\n      <td>South America</td>\n      <td>2024-03-07</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C0004</td>\n      <td>Kathleen Rodriguez</td>\n      <td>South America</td>\n      <td>2022-10-09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C0005</td>\n      <td>Laura Weber</td>\n      <td>Asia</td>\n      <td>2022-08-15</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"product_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.774747Z","iopub.execute_input":"2025-01-27T16:19:22.775105Z","iopub.status.idle":"2025-01-27T16:19:22.787854Z","shell.execute_reply.started":"2025-01-27T16:19:22.775068Z","shell.execute_reply":"2025-01-27T16:19:22.786825Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"  ï»¿ProductID              ProductName     Category   Price\n0         P001     ActiveWear Biography        Books  169.30\n1         P002    ActiveWear Smartwatch  Electronics  346.30\n2         P003  ComfortLiving Biography        Books   44.12\n3         P004            BookWorld Rug   Home Decor   95.69\n4         P005          TechPro T-Shirt     Clothing  429.31","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ï»¿ProductID</th>\n      <th>ProductName</th>\n      <th>Category</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>P001</td>\n      <td>ActiveWear Biography</td>\n      <td>Books</td>\n      <td>169.30</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>P002</td>\n      <td>ActiveWear Smartwatch</td>\n      <td>Electronics</td>\n      <td>346.30</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>P003</td>\n      <td>ComfortLiving Biography</td>\n      <td>Books</td>\n      <td>44.12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>P004</td>\n      <td>BookWorld Rug</td>\n      <td>Home Decor</td>\n      <td>95.69</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>P005</td>\n      <td>TechPro T-Shirt</td>\n      <td>Clothing</td>\n      <td>429.31</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"transaction_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.788968Z","iopub.execute_input":"2025-01-27T16:19:22.789355Z","iopub.status.idle":"2025-01-27T16:19:22.816964Z","shell.execute_reply.started":"2025-01-27T16:19:22.789321Z","shell.execute_reply":"2025-01-27T16:19:22.815950Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"  ï»¿TransactionID CustomerID ProductID      TransactionDate  Quantity  \\\n0           T00001      C0199      P067  2024-08-25 12:38:23         1   \n1           T00112      C0146      P067  2024-05-27 22:23:54         1   \n2           T00166      C0127      P067   2024-04-25 7:38:55         1   \n3           T00272      C0087      P067  2024-03-26 22:55:37         2   \n4           T00363      C0070      P067  2024-03-21 15:10:10         3   \n\n   TotalValue   Price  \n0      300.68  300.68  \n1      300.68  300.68  \n2      300.68  300.68  \n3      601.36  300.68  \n4      902.04  300.68  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ï»¿TransactionID</th>\n      <th>CustomerID</th>\n      <th>ProductID</th>\n      <th>TransactionDate</th>\n      <th>Quantity</th>\n      <th>TotalValue</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>T00001</td>\n      <td>C0199</td>\n      <td>P067</td>\n      <td>2024-08-25 12:38:23</td>\n      <td>1</td>\n      <td>300.68</td>\n      <td>300.68</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>T00112</td>\n      <td>C0146</td>\n      <td>P067</td>\n      <td>2024-05-27 22:23:54</td>\n      <td>1</td>\n      <td>300.68</td>\n      <td>300.68</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>T00166</td>\n      <td>C0127</td>\n      <td>P067</td>\n      <td>2024-04-25 7:38:55</td>\n      <td>1</td>\n      <td>300.68</td>\n      <td>300.68</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T00272</td>\n      <td>C0087</td>\n      <td>P067</td>\n      <td>2024-03-26 22:55:37</td>\n      <td>2</td>\n      <td>601.36</td>\n      <td>300.68</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>T00363</td>\n      <td>C0070</td>\n      <td>P067</td>\n      <td>2024-03-21 15:10:10</td>\n      <td>3</td>\n      <td>902.04</td>\n      <td>300.68</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"set(customer_data['Region'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.818311Z","iopub.execute_input":"2025-01-27T16:19:22.818732Z","iopub.status.idle":"2025-01-27T16:19:22.836266Z","shell.execute_reply.started":"2025-01-27T16:19:22.818661Z","shell.execute_reply":"2025-01-27T16:19:22.834975Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"{'Asia', 'Europe', 'North America', 'South America'}"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"len(customer_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.837175Z","iopub.execute_input":"2025-01-27T16:19:22.837493Z","iopub.status.idle":"2025-01-27T16:19:22.853995Z","shell.execute_reply.started":"2025-01-27T16:19:22.837467Z","shell.execute_reply":"2025-01-27T16:19:22.852948Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"200"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"len(customer_data['CustomerName'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.857432Z","iopub.execute_input":"2025-01-27T16:19:22.857843Z","iopub.status.idle":"2025-01-27T16:19:22.875441Z","shell.execute_reply.started":"2025-01-27T16:19:22.857802Z","shell.execute_reply":"2025-01-27T16:19:22.874441Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"200"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Number of customers per region\nsns.countplot(data=customer_data, x='Region')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:22.877593Z","iopub.execute_input":"2025-01-27T16:19:22.877984Z","iopub.status.idle":"2025-01-27T16:19:24.030897Z","shell.execute_reply.started":"2025-01-27T16:19:22.877942Z","shell.execute_reply":"2025-01-27T16:19:24.029939Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Example Data\nsns.set(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 20))  # Increase height to add space for dense labels\nax = sns.countplot(data=product_data, y='ProductName', order=product_data['ProductName'].value_counts().index)\n\n# Rotate labels if necessary and add more padding\nax.set_yticklabels(ax.get_yticklabels(), fontsize=10)\nplt.tight_layout()  # Adjusts layout to fit everything well\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:20:29.499289Z","iopub.execute_input":"2025-01-27T16:20:29.499786Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"a=list(product_data.columns) \nlen(set(product_data[a[0]]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:24.967845Z","iopub.execute_input":"2025-01-27T16:19:24.968231Z","iopub.status.idle":"2025-01-27T16:19:24.976279Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"100"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"len(transaction_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:24.977351Z","iopub.execute_input":"2025-01-27T16:19:24.977667Z","iopub.status.idle":"2025-01-27T16:19:24.995966Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"1000"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"print('No. of Unique Customes',len(set(transaction_data['CustomerID'])))  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:24.997050Z","iopub.execute_input":"2025-01-27T16:19:24.997394Z","iopub.status.idle":"2025-01-27T16:19:25.019578Z"}},"outputs":[{"name":"stdout","text":"No. of Unique Customes 199\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"print('No. of Unique Customes',len(set(transaction_data['CustomerID']))) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:25.020701Z","iopub.execute_input":"2025-01-27T16:19:25.021083Z","iopub.status.idle":"2025-01-27T16:19:25.038282Z"}},"outputs":[{"name":"stdout","text":"No. of Unique Customes 199\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Example Data\nsns.set(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 20))  # Increase height to add space for dense labels\nax = sns.countplot(data=transaction_data, y='ProductID') #, order=products['ProductName'].value_counts().index)\n\n# Rotate labels if necessary and add more padding\nax.set_yticklabels(ax.get_yticklabels(), fontsize=10)\nplt.tight_layout()  # Adjusts layout to fit everything well\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:19:25.039336Z","iopub.execute_input":"2025-01-27T16:19:25.039625Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"a=list(product_data.columns) \na[0]='ProductID'\nproduct_data.columns=a\nprint(product_data['ProductName'][58])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(1)\na=list(transaction_data.columns) \na[0]='TransactionID'\ntransaction_data.columns=a\n\ncustomer_counts = transaction_data.groupby('CustomerID')['TransactionID'].count()\nreturning_customers = customer_counts[customer_counts > 1]\ntotal_returning_customers = len(returning_customers)\nprint(f\"Total Returning Customers: {total_returning_customers}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"customer_counts[customer_counts>10]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"customer_data['CustomerID'][108]","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}