{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10591954,"sourceType":"datasetVersion","datasetId":6555535}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.preprocessing import StandardScaler","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.570191Z","iopub.execute_input":"2025-01-27T14:12:18.570475Z","iopub.status.idle":"2025-01-27T14:12:20.244646Z","shell.execute_reply.started":"2025-01-27T14:12:18.570449Z","shell.execute_reply":"2025-01-27T14:12:20.243580Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" # Load datasets\ncustomers = pd.read_csv('/kaggle/input/zeotap-assignment/Customers.csv')\nproducts = pd.read_csv('/kaggle/input/zeotap-assignment/Products.csv')\ntransactions = pd.read_csv('/kaggle/input/zeotap-assignment/Transactions.csv')\na=list(products.columns) \na[0]='ProductID'\nproducts.columns=a","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.366011Z","iopub.execute_input":"2025-01-27T14:12:18.366465Z","iopub.status.idle":"2025-01-27T14:12:18.404240Z","shell.execute_reply.started":"2025-01-27T14:12:18.366435Z","shell.execute_reply":"2025-01-27T14:12:18.403093Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"b=list(transactions.columns) \nb[0]='TransactionID'\ntransactions.columns=b","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.406355Z","iopub.execute_input":"2025-01-27T14:12:18.406670Z","iopub.status.idle":"2025-01-27T14:12:18.411250Z","shell.execute_reply.started":"2025-01-27T14:12:18.406640Z","shell.execute_reply":"2025-01-27T14:12:18.410217Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"c=list(customers.columns) \nc[0]='CustomerID'\ncustomers.columns=c","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.412642Z","iopub.execute_input":"2025-01-27T14:12:18.412916Z","iopub.status.idle":"2025-01-27T14:12:18.432274Z","shell.execute_reply.started":"2025-01-27T14:12:18.412893Z","shell.execute_reply":"2025-01-27T14:12:18.431110Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"customers.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.433231Z","iopub.execute_input":"2025-01-27T14:12:18.433503Z","iopub.status.idle":"2025-01-27T14:12:18.472322Z","shell.execute_reply.started":"2025-01-27T14:12:18.433482Z","shell.execute_reply":"2025-01-27T14:12:18.471336Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"  CustomerID        CustomerName         Region  SignupDate\n0      C0001    Lawrence Carroll  South America  2022-07-10\n1      C0002      Elizabeth Lutz           Asia  2022-02-13\n2      C0003      Michael Rivera  South America  2024-03-07\n3      C0004  Kathleen Rodriguez  South America  2022-10-09\n4      C0005         Laura Weber           Asia  2022-08-15","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>CustomerName</th>\n      <th>Region</th>\n      <th>SignupDate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>C0001</td>\n      <td>Lawrence Carroll</td>\n      <td>South America</td>\n      <td>2022-07-10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>C0002</td>\n      <td>Elizabeth Lutz</td>\n      <td>Asia</td>\n      <td>2022-02-13</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C0003</td>\n      <td>Michael Rivera</td>\n      <td>South America</td>\n      <td>2024-03-07</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C0004</td>\n      <td>Kathleen Rodriguez</td>\n      <td>South America</td>\n      <td>2022-10-09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C0005</td>\n      <td>Laura Weber</td>\n      <td>Asia</td>\n      <td>2022-08-15</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"transactions_products = pd.merge(transactions, products, on='ProductID')\ncustomer_data = pd.merge(transactions_products, customers, on='CustomerID') \nprint(customer_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.473224Z","iopub.execute_input":"2025-01-27T14:12:18.473494Z","iopub.status.idle":"2025-01-27T14:12:18.507865Z","shell.execute_reply.started":"2025-01-27T14:12:18.473470Z","shell.execute_reply":"2025-01-27T14:12:18.507026Z"}},"outputs":[{"name":"stdout","text":"  TransactionID CustomerID ProductID      TransactionDate  Quantity  \\\n0        T00001      C0199      P067  2024-08-25 12:38:23         1   \n1        T00112      C0146      P067  2024-05-27 22:23:54         1   \n2        T00166      C0127      P067   2024-04-25 7:38:55         1   \n3        T00272      C0087      P067  2024-03-26 22:55:37         2   \n4        T00363      C0070      P067  2024-03-21 15:10:10         3   \n\n   TotalValue  Price_x                      ProductName     Category  Price_y  \\\n0      300.68   300.68  ComfortLiving Bluetooth Speaker  Electronics   300.68   \n1      300.68   300.68  ComfortLiving Bluetooth Speaker  Electronics   300.68   \n2      300.68   300.68  ComfortLiving Bluetooth Speaker  Electronics   300.68   \n3      601.36   300.68  ComfortLiving Bluetooth Speaker  Electronics   300.68   \n4      902.04   300.68  ComfortLiving Bluetooth Speaker  Electronics   300.68   \n\n      CustomerName         Region  SignupDate  \n0   Andrea Jenkins         Europe  2022-12-03  \n1  Brittany Harvey           Asia  2024-09-04  \n2  Kathryn Stevens         Europe  2024-04-04  \n3  Travis Campbell  South America  2024-04-11  \n4    Timothy Perez         Europe  2022-03-15  \n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Aggregate customer transaction data\ncustomer_features = customer_data.groupby('CustomerID').agg({\n    'TotalValue': 'sum',        # Total spending\n    'Quantity': 'sum',          # Total quantity purchased\n    'Category': lambda x: x.mode()[0],  # Most frequent product category\n    'Region': 'first'           # Region of the customer\n}).reset_index()\n\n# Convert categorical columns to numerical using one-hot encoding\ncustomer_features = pd.get_dummies(customer_features, columns=['Category', 'Region'])\n\n# Display customer features\nprint(customer_features.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.508666Z","iopub.execute_input":"2025-01-27T14:12:18.508934Z","iopub.status.idle":"2025-01-27T14:12:18.567780Z","shell.execute_reply.started":"2025-01-27T14:12:18.508910Z","shell.execute_reply":"2025-01-27T14:12:18.566698Z"}},"outputs":[{"name":"stdout","text":"  CustomerID  TotalValue  Quantity  Category_Books  Category_Clothing  \\\n0      C0001     3354.52        12           False              False   \n1      C0002     1862.74        10           False               True   \n2      C0003     2725.38        14           False              False   \n3      C0004     5354.88        23            True              False   \n4      C0005     2034.24         7           False              False   \n\n   Category_Electronics  Category_Home Decor  Region_Asia  Region_Europe  \\\n0                  True                False        False          False   \n1                 False                False         True          False   \n2                 False                 True        False          False   \n3                 False                False        False          False   \n4                  True                False         True          False   \n\n   Region_North America  Region_South America  \n0                 False                  True  \n1                 False                 False  \n2                 False                  True  \n3                 False                  True  \n4                 False                 False  \n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# Normalize numerical features for fair comparison\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(customer_features.drop('CustomerID', axis=1))\n\n# Compute cosine similarity\nsimilarity_matrix = cosine_similarity(scaled_features)\n\n# Create a similarity DataFrame\nsimilarity_df = pd.DataFrame(similarity_matrix, index=customer_features['CustomerID'], columns=customer_features['CustomerID'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:18.570191Z","iopub.execute_input":"2025-01-27T14:12:18.570475Z","iopub.status.idle":"2025-01-27T14:12:20.244646Z","shell.execute_reply.started":"2025-01-27T14:12:18.570449Z","shell.execute_reply":"2025-01-27T14:12:20.243580Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to get top 3 similar customers\ndef get_top_similar(customers_df, customer_id, top_n=3):\n    similar_customers = customers_df.loc[customer_id].sort_values(ascending=False)[1:top_n+1]\n    return [(cust_id, round(score, 3)) for cust_id, score in similar_customers.items()]\n\n# Generate recommendations for the first 20 customers\nfirst_20_customers = customer_features['CustomerID'][:20]\nlookalike_results = {\n    customer_id: get_top_similar(similarity_df, customer_id)\n    for customer_id in first_20_customers\n}\n\n# Save to CSV\nlookalike_df = pd.DataFrame({\n    'CustomerID': lookalike_results.keys(),\n    'Lookalikes': [str(value) for value in lookalike_results.values()]\n})\nlookalike_df.to_csv('FirstName_LastName_Lookalike.csv', index=False)\n\n# Display example output\nprint(lookalike_df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T14:12:20.245931Z","iopub.execute_input":"2025-01-27T14:12:20.246454Z","iopub.status.idle":"2025-01-27T14:12:20.269174Z","shell.execute_reply.started":"2025-01-27T14:12:20.246426Z","shell.execute_reply":"2025-01-27T14:12:20.268101Z"}},"outputs":[{"name":"stdout","text":"  CustomerID                                         Lookalikes\n0      C0001  [('C0184', 0.998), ('C0048', 0.995), ('C0190',...\n1      C0002  [('C0088', 0.999), ('C0092', 0.98), ('C0106', ...\n2      C0003  [('C0076', 0.983), ('C0052', 0.974), ('C0031',...\n3      C0004  [('C0169', 0.982), ('C0087', 0.979), ('C0165',...\n4      C0005  [('C0186', 0.999), ('C0140', 0.996), ('C0146',...\n","output_type":"stream"}],"execution_count":9}]}